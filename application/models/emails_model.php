<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Emails_model extends CI_Model{   // Количество в таблице emails  function get_emails_count(){     $this->db->select('id');     $query = $this->db->get('emails');	   return	$countQ = $query->num_rows();	  }  // Список всех писем  function get_all_emails($type){    $this->db->where('etype', $type);    $this->db->order_by('sendAfterPrev', 'ASC');    $query = $this->db->get('emails');    return $query->result();  }   // Список всех писем их очереди для папки  function get_all_emails_list($type){    $this->db->select('e.*, l.*');    $this->db->join('emails as e', 'e.id=l.eid', 'INNER');    $this->db->where('l.fid', $type);    $this->db->order_by('l.sendAfterPrev', 'ASC');    $query = $this->db->get('emails_lists as l');    return $query->result();  }   // Список всех писем  function get_all_emails_full(){    //$this->db->order_by('sendAfterPrev', 'ASC');    $this->db->where('etype', '0');    $this->db->order_by('id','DESC');    $query = $this->db->get('emails');    return $query->result();  }  // получаем ожитающее письмо по ид  function get_wemail_by_id($id){      $this->db->where('id', $id);      $q = $this->db->get('emails_waiting');      return $q->row();  }   // получить список писем которые нужно разослать  function get_all_waiting_email(){    $this->db->where('sendAtDate <', date('Y-m-d H:i:s'));    $ew = $this->db->get('emails_waiting');    return $ew->result();  }  // Список всех писем  function get_all_emails_names(){    $this->db->select('name, id');    $this->db->where('etype', '0');    $this->db->order_by('name', 'ASC');    $query = $this->db->get('emails');    return $query->result();  }    // Список всех писем  function get_drivers_emails_names(){    $this->db->select('name, id');    $this->db->where('etype', '0');    $this->db->order_by('name', 'ASC');    $query = $this->db->get('drivers_emails');    return $query->result();  }     // Список отправленых писем  function get_sended_stat($qid){    $this->db->select('e.*, s.*');    $this->db->from('emails_sended as s');    $this->db->join('emails as e', 'e.id = s.eid', 'LEFT');    $this->db->where('s.qid', $qid);    $this->db->order_by('atDate', 'DESC');    $query = $this->db->get();    return $query->result();  }   // Список отправленых писем  function get_drivers_sended_stat($qid){    $this->db->select('e.*, s.*');    $this->db->from('drivers_emails_sended as s');    $this->db->join('drivers_emails as e', 'e.id = s.eid', 'LEFT');    $this->db->where('s.qid', $qid);    $this->db->order_by('atDate', 'DESC');    $query = $this->db->get();    return $query->result();  }  // Список полученых писем  function get_recived_stat($qid){    $this->db->select('*');    $this->db->from('emails_recived');    $this->db->where('qid', $qid);    $this->db->order_by('atDate', 'DESC');    $query = $this->db->get();    return $query->result();  }  // Список полученых писем  function get_drivers_recived_stat($qid){    $this->db->select('*');    $this->db->from('drivers_emails_recived');    $this->db->where('qid', $qid);    $this->db->order_by('atDate', 'DESC');    $query = $this->db->get();    return $query->result();  }  // Получаем список шалонов для водителей   function get_drivers_shablons(){     $this->db->where('sendToDriver', 1);     $q = $this->db->get('emails');     return $q->result();   }  // Список полученых писем  function get_waiting_stat($qid){     $this->db->select('e.*, s.*');    $this->db->from('emails_waiting as s');    $this->db->join('emails as e', 'e.id = s.eid', 'LEFT');    $this->db->where('s.qid', $qid);    $this->db->order_by('atDate', 'DESC');    $query = $this->db->get();    return $query->result();  }  // Добавление в процесс рассылки с задержкой  function add_to_send_process($addArray){    $this->db->insert('emails_waiting', $addArray);    $nid = $this->db->insert_id();    $this->db->where('id', $addArray['qid']);    $q = $this->db->get('quotes');    $this->db->where('id', $addArray['qid']);    $this->db->update('quotes', array('emailsWait'=>($q->row()->emailsWait+1)));    return $nid;  }  // Получит информациюпро писмо по ид  function get_email_by_id($eid){    $this->db->where('id', $eid);    return $this->db->get('emails')->row();  }   // Получит информациюпро писмо водителю по ид  function get_drivers_email_by_id($eid){    $this->db->where('id', $eid);    return $this->db->get('drivers_emails')->row();  }  // Добавляем письмо к рассылку  function add_emails_to_list($eid, $fid){    $addArray = array('eid'=>$eid, 'fid'=>$fid);    $this->db->insert('emails_lists', $addArray);    $this->db->where('id', $this->db->insert_id());    $elist = $this->db->get('emails_lists')->row();    return $elist;  }  // Прописываем значение в шаблон письма  function update_email_values($emailText, $quote){    if($quote->shipVia == 0){      $shipVia = "Open";    }else if($quote->shipVia == 1){      $shipVia = "Enclosed";    }else if($quote->shipVia == 2){      $shipVia = "Flat Bed Transport";    }else if($quote->shipVia == 3){      $shipVia = "Other";    }    if($quote->vechinesRun == 0){      $vechinesRun = "Run";    }else{      $vechinesRun = "INOP";    }    $this->db->where('id', $quote->driverid);    $driver = $this->db->get('drivers')->row();    if(!isset($driver->name)) $driver = new stdClass();    if(!isset($quote->dPhone3)) $quote->dPhone3 = "none";    if(!isset($driver->name)) $driver->name = "none";    if(!isset($driver->phone)) $driver->phone = "none";    if(!isset($driver->mobile)) $driver->mobile = "none";    if(!isset($driver->phone2)) $driver->phone2 = "none";    $chArray = array(      '[quote_number]'=>str_pad($quote->id, 5,"0",STR_PAD_LEFT),      '[order_number]'=>str_pad($quote->id, 5,"0",STR_PAD_LEFT),      '[first_name]'=>trim($quote->FirstName),      '[origin_state_code]'=>trim($quote->distFromState),      '[destination_state_code]'=>trim($quote->distToState),      '[vehicle_list]'=>trim($quote->carYear)." ".trim($quote->carMake)." ".trim($quote->carModel),      '[ship_via]'=>trim($shipVia),      '[operable_inop]'=>trim($vechinesRun),      '[estimated_load_date]'=>date('m/d/Y', strtotime($quote->LoadDate)),      '[estimated_delivery_date]'=>date('m/d/Y', strtotime($quote->DeliveryDate)),      '[deposit_required]'=>$quote->deposit,      '[pickup_contact]'=>trim($quote->pFname),      '[pickup_phone]'=>trim($quote->pPhone),      '[pickup_phone2]'=>trim($quote->pPhone2),      '[pickup_phone3]'=>trim($quote->pPhone3),      '[pickup_phone_cell]'=>trim($quote->pMobile),      '[pickup_address]'=>trim($quote->pAddrStreet),      '[pickup_city]'=>trim($quote->pAddrCity),      '[pickup_state_code]'=>trim($quote->pAddrState),      '[dropoff_contact]'=>trim($quote->dFname),      '[dropoff_phone]'=>trim($quote->dPhone),      '[dropoff_phone2]'=>trim($quote->dPhone2),      '[dropoff_phone3]'=>trim($quote->dPhone3),      '[dropoff_phone_cell]'=>trim($quote->dMobile),      '[dropoff_address]'=>trim($quote->dAddrStreet),      '[dropoff_city]'=>trim($quote->dAddrCity),      '[dropoff_state_code]'=>trim($quote->dAddrState),      '[note_to_shipper]'=>trim($quote->forShipperNotes),      '[u_name]'=>"Mike Lowell",      '[cod_amount]'=>trim($quote->CarrierPay),      '[first_pickup_date]'=>date('m/d/Y', strtotime($quote->LoadDate)),      '[tariff]'=>($quote->price+$quote->deposit),      '[phone]'=>trim($quote->Phone),      '[vehicle_make]'=>trim($quote->carMake),      '[vehicle_model]'=>trim($quote->carModel),      '[origin_city]'=>trim($quote->distFromCity),      '[destination_city]'=>trim($quote->distToCity),      '[estimated_ship_date]'=>date('m/d/Y', strtotime($quote->arriveDate)),      '[EID]'=>$quote->id,      '[Qid]'=>$quote->id,      '[Eid]'=>$quote->id,      '[carrier_name]'=>trim($driver->name),      '[carrier_phone1]'=>trim($driver->phone),      '[driver_phone]'=>trim($driver->mobile),      '[carrier_phone2]'=>trim($driver->phone2),      '[token]'=>md5($quote->Email.$quote->id)      );    return str_replace(array_keys($chArray), $chArray,$emailText);  }  // Удаляем письмо из списка ожидающих рассылки  function delete_email_from_waiting($did){    $this->db->where('id', $did);    $ew = $this->db->get('emails_waiting')->row();    $this->db->where('id', $did);    $this->db->delete('emails_waiting');    $this->db->last_query();        $this->db->where('id', $ew->qid);    $q = $this->db->get('quotes');    $this->db->where('id', $ew->qid);    $this->db->update('quotes', array('emailsWait'=>($q->row()->emailsWait-1)));      }  // Отмечаем как прочитаное письмо  function chEmailstatus($eid){    $this->db->where('id', $eid);    $this->db->update('emails_sended', array('status'=>1));  }  // Добавляем полученое писмо в ответы у квот function add_email_to_recived($emailFrom, $text, $subject, $message_id){    $this->db->where('Email', $emailFrom);    $contacts = $this->db->get('users_contact');    $count = 0;    foreach($contacts->result() as $contact){      //print_r($contact);      $count++;         $this->db->where('contact', $contact->id);      $quote = $this->db->get('quotes');      $quotes = $quote->result();      $returned = array();      foreach($quotes as $quote){        $qid = $quote->id;        $returned[] = $qid;        $addArray = array(          'subject'=>$subject,          'text'=>$text,          'qid'=>$qid,          'from_email'=>$emailFrom,          'atDate'=>date('Y-m-d H:i:s'),          'message_id'=>$message_id          );          $this->db->insert('emails_recived', $addArray);                  $this->db->where('id', $qid);          $this->db->update('quotes', array('emailsRecived'=>($quote->emailsRecived+1)));              }      if($count == 0){        return 0;      }          }    return $returned;     } // Отметить полученое письмо как прочитаное function update_emails_to_read($REid){  // $ipaddress = '';    if (isset($_SERVER['HTTP_CLIENT_IP']))        $ipaddress = $_SERVER['HTTP_CLIENT_IP'];    else if(isset($_SERVER['HTTP_X_FORWARDED_FOR']))        $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];    else if(isset($_SERVER['HTTP_X_FORWARDED']))        $ipaddress = $_SERVER['HTTP_X_FORWARDED'];    else if(isset($_SERVER['HTTP_FORWARDED_FOR']))        $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];    else if(isset($_SERVER['HTTP_FORWARDED']))        $ipaddress = $_SERVER['HTTP_FORWARDED'];    else if(isset($_SERVER['REMOTE_ADDR']))        $ipaddress = $_SERVER['REMOTE_ADDR'];    else        $ipaddress = 'UNKNOWN';    $this->db->where('id', $REid);    $this->db->update('emails_recived', array('status'=>1)); }// Удаление полученогописьма function delete_recived_email($did){         $this->db->where('id', $did);    $Remail = $this->db->get('emails_recived')->row();    $this->db->where('id', $Remail->qid);    $q = $this->db->get('quotes')->row();    $this->db->where('id', $Remail->qid);    $this->db->update('quotes', array('emailsRecived'=>($q->emailsRecived-1)));     $this->db->where('id', $did);    $this->db->delete('emails_recived');     }  // Перемещем письмо в отправленные  function update_email_us_sent($eid){    $this->db->where('id', $eid);    $ew = $this->db->get('emails_waiting')->row();            $addArray = array(      'qid'=>$ew->qid,      'status'=>0,      'atDate'=>date('Y-m-d H:i:s'),      'eid'=>$ew->eid,      'specEmail'=>$ew->specEmail      );      $this->db->insert('emails_sended', $addArray);    $nid = $this->db->insert_id();    $this->db->where('id', $ew->qid);    $q = $this->db->get('quotes');    $this->db->where('id', $ew->qid);    $this->db->update('quotes', array('emailsSent'=>($q->row()->emailsSent+1)));    return $nid;  }  // Остановить рассылку  function stop_all_waiting_emails($qid){    $this->db->where('qid', $qid);    $this->db->update('emails_waiting', array('status'=>'1'));  }  // Формирование спика расылки для раздела  public function add_mails_waiting($qid, $folder){      $emails = $this->get_all_emails_list($folder);      foreach($emails as $email){            $emailInfo = $this->get_email_by_id($email->eid);      //$date = $this->input->post('date');      $addArray = array(        'eid'=>$email->eid,        'qid'=>$qid,        'atDate'=>date('Y-m-d H:i:s'),        'sendAtDate'=>date('Y-m-d H:i:s', (time()+$email->sendAfterPrev))      );      $newid = $this->add_to_send_process($addArray);            $CI =& get_instance();      $CI->load->model('statistic_model', 'statistic');      $CI->statistic->email_send_action($qid, '0', "ADD EMAIL TO SEND (".$emailInfo->name.")");        }  }  // Получаем список для статистики по рассылке  function get_all_waiting_stat(){    $this->db->select('e.qid as qid, e.atDate as eatDate, e.eid as eid, q.*, em.name as ename');    $this->db->join('quotes as q', 'e.qid = q.id', 'INNER');    $this->db->join('emails as em', 'em.id = e.eid', 'INNER');    $this->db->order_by('e.id', 'DESC');    $q = $this->db->get('emails_waiting as  e');    return $q->result();  }  // Получаем список для статистики по рассылке  function get_all_sended_stat(){    $this->db->select('e.qid as qid, e.atDate as eatDate, e.eid as eid, q.*, em.name as ename');    $this->db->join('quotes as q', 'e.qid = q.id', 'INNER');    $this->db->join('emails as em', 'em.id = e.eid', 'INNER');    $this->db->order_by('e.id', 'DESC');    $q = $this->db->get('emails_sended as  e');    return $q->result();  }   // Получаем список для статистики по рассылке  function get_all_opened_stat(){    $this->db->select('e.qid as qid, e.id as esid, e.openedDate as eatDate, e.eid as eid, q.*, em.name as ename');    $this->db->join('quotes as q', 'e.qid = q.id', 'INNER');    $this->db->join('emails as em', 'em.id = e.eid', 'INNER');    $this->db->where('e.status', '1');    $this->db->where('e.viewit', '0');    $this->db->order_by('e.id', 'DESC');    $q = $this->db->get('emails_sended as  e');    return $q->result();  }  // Получаем список для статистики по рассылке  function get_all_recived_stat(){    $this->db->select('e.qid as qid, e.status as status,  e.atDate as eatDate, q.*, e.subject as ename');    $this->db->join('quotes as q', 'e.qid = q.id', 'INNER');    //$this->db->where('e.status', '1');    $this->db->order_by('e.id', 'DESC');    $q = $this->db->get('emails_recived as  e');    //echo $this->db->last_query();    return $q->result();  }    // Получаем список для статистики по рассылке  function get_waiting_stat_($qid){    $this->db->select('e.atDate as eatDate, e.eid as eid, em.name as ename');    $this->db->join('emails as em', 'em.id = e.eid', 'INNER');    $this->db->where('e.qid', $qid);    $this->db->order_by('e.id', 'DESC');    $q = $this->db->get('emails_waiting as  e');    return $q->result();  }  // Получаем список для статистики по рассылке  function get_sended_stat_($qid){    $this->db->select(' e.atDate as eatDate, e.eid as eid,  em.name as ename');    $this->db->join('emails as em', 'em.id = e.eid', 'INNER');    $this->db->where('e.qid', $qid);    $this->db->order_by('e.id', 'DESC');    $q = $this->db->get('emails_sended as  e');    return $q->result();  }  // Получаем список для статистики по рассылке  function get_opened_stat_($qid){    $this->db->select(' e.openedDate as eatDate, e.eid as eid, em.name as ename');    $this->db->join('emails as em', 'em.id = e.eid', 'INNER');    $this->db->where('e.status', '1');    $this->db->where('e.qid', $qid);    $this->db->order_by('e.id', 'DESC');    $q = $this->db->get('emails_sended as  e');    return $q->result();  }  // Получаем список для статистики по рассылке  function get_recived_stat_($qid){    $this->db->select(' e.atDate as eatDate,  e.subject as ename');    $this->db->where('e.qid', $qid);    $this->db->order_by('e.id', 'DESC');    $q = $this->db->get('emails_recived as  e');    return $q->result();  }  // Получаем данные для статистики форм  function get_stat_forms($formid){    $this->db->select('f.*, q.*, f.id as id');    $this->db->join('quotes as q', 'f.qid = q.id', 'LEFT');    $this->db->where('f.formid', $formid);    $this->db->order_by('f.id', 'DESC');    $q = $this->db->get('forms_data as f');     return $q->result();  }  // Получаем цыфры для стаистики форм  function get_forms_count($formid){    $this->db->select('COUNT(id) as icount');    $this->db->where('formid', $formid);    $q = $this->db->get('forms_data');    $res = $q->row();    if(isset($q->row()->icount)){        return $q->row()->icount;     }else{          return 0;    }  }  // Отмечаем как просмотреное уведомление об открытии письма  function update_open_as_read($eid){    $this->db->where('id', $eid);    $this->db->update('emails_sended', array('viewit'=>1));  }   // [ANCADD]    function get_all_sms_full(){        //$this->db->order_by('sendAfterPrev', 'ASC');        $this->db->where('etype', '0');        $this->db->order_by('id','DESC');        $query = $this->db->get('sms');        return $query->result();    }  //[ANCADD]function delete_email_form_wating($wid){    $this->db->where('id', $wid);    $this->db->delete('emails_waiting');}  // [ANCADD]    function get_all_sms_names(){        $this->db->select('name, id');        $this->db->where('etype', '0');        $this->db->order_by('name', 'ASC');        $query = $this->db->get('sms');        return $query->result();    }     //[ANCADD]    function get_sended_sms_stat($qid){        $this->db->select('sms.*, sms_sended.*');        $this->db->from('sms_sended');        $this->db->join('sms', 'sms.id = sms_sended.sms_id', 'LEFT');        $this->db->where('sms_sended.qid', $qid);        $this->db->order_by('atDate', 'DESC');        $query = $this->db->get();        return $query->result();    }     // [ANCADD]    function get_recived_sms_stat($qid){        $this->db->select('sms_recived.*');        $this->db->from('sms_recived');        $this->db->where('qid', $qid);        $this->db->order_by('atDate', 'DESC');        $query = $this->db->get();        return $query->result();    }     // [ANCADD]    function get_waiting_sms_stat($qid){        $this->db->select('sms.name, sms.subject, sms.text, sms.etype, sms.OnlyInworkTime, sms_waiting.*');        $this->db->from('sms_waiting');        $this->db->join('sms', 'sms.id = sms_waiting.sms_id', 'LEFT');        $this->db->where('sms_waiting.qid', $qid);        $this->db->order_by('atDate', 'DESC');        $query = $this->db->get();        return $query->result();    }    // [ANCADD]    function add_sms_to_send_process($addArray){        $this->db->insert('sms_waiting', $addArray);        $nid = $this->db->insert_id();        //$this->db->where('id', $addArray['qid']);        //$q = $this->db->get('quotes');        //$this->db->where('id', $addArray['qid']);        //$this->db->update('quotes', array('emailsWait'=>($q->row()->emailsWait+1)));        return $nid;    }    //Get sms template by id    function get_sms_template_by_id($smsid){        $this->db->where('id', $smsid);        return $this->db->get('sms')->row();    }    //Add one sms to sms_waiting    function add_sms_waiting($addArray){        $this->db->insert('sms_waiting', $addArray);        $new_id = $this->db->insert_id();        return $new_id;    }    //Получить все просроченные СМС    function get_sms_waiting_all_expired()    {        $this->db->where('sendAtDate <', date('Y-m-d H:i:s'));        $sms_waiting = $this->db->get('sms_waiting');        return $sms_waiting->result();    }    //Добавить СМС в отправленные    function add_sms_sended($addArray){        $this->db->insert('sms_sended', $addArray);        $nid = $this->db->insert_id();        return $nid;    }    //Delete one sms from sms_sended    function delete_sms_sended_by_id($sms_sended_id){        $this->db->where('id', $sms_sended_id);        $this->db->delete('sms_sended');        //$this->db->query("DELETE FROM `sms_sended` WHERE `id`=?", array($sms_sended_id));    }    //Delete one sms from sms_waiting    function delete_sms_waiting_by_id($wsms_id){        $this->db->where('id', $wsms_id);        $this->db->delete('sms_waiting');    }    //[ANCMASS] Получить телефон по id Квоты    function get_phone_by_qid($qid)    {        $query = $this->db->query("SELECT users_contact.Phone FROM users_contact                                    INNER JOIN quotes ON quotes.contact = users_contact.id                                    WHERE quotes.id =?", array($qid));        return $query->row()->Phone;    }    function set_sms_template($sms_id, $updArray){        $this->db->where('id', $sms_id);        $this->db->update('sms', $updArray);    }//----------------------------MAILCHIMP MODELS BEGIN----------------------------////-------------------GETS------------------------//    //Get mass dispatch identificator item from emails_mass_queue by sended id from technical mail    function emails_mass_get_queue_item_by_sended($sended_id)    {        $this->db->where('sended_id', $sended_id);        $result = $this->db->get('emails_mass_queue');        return $result->row();    }    //Get all sended emails that belongs to one mass dispatch identified by mass_id    function get_mass_sended($tech_id){        $this->db->where('mass_id', $tech_id);        $result = $this->db->get('emails_sended');        return $result;    }    function get_mass_emails_waiting_by_mass_id($mass_id){        $this->db->where('mass_id', $mass_id);        $result = $this->db->get('emails_waiting');        return $result;    }    //Get sended campaign report from Mailchimp    function mc_campaign_report($campaign_id){        $curl = curl_init(MAILCHIMP_SERVER_URL.'/reports/'.$campaign_id.'/email-activity');        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'GET');        curl_setopt($curl, CURLOPT_USERPWD, MAILCHIMP_API_KEY );        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($curl, CURLOPT_HEADER, false);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);        curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);        $response = curl_exec($curl);        $res = json_decode($response, 1);        return $res;    }    //Get all waiting technical mails    function get_emails_mass_items_not_sended()    {        $this->db->where('sended_id = 0');        $result = $this->db->get('emails_mass_queue');        return $result;    }    //Get mass dispatch identificator by id    function email_mass_get_queue_item_by_mass_id($tech_id)    {        $this->db->where('mass_id', $tech_id);        $result = $this->db->get('emails_mass_queue');        return $result->row();    }    //Get waiting emails by mass_id (belonged to mass dispatch)    function get_emails_waiting_by_mass_id($techid){        $this->db->where('mass_id', $techid);        $result = $this->db->get('emails_waiting');        return $result;    }    function get_mass_sendtime_by_mass_id($mass_id){        $this->db->where('mass_id', $mass_id);        $this->db->where('specEmail', 'TECHADRESS');        $result = $this->db->get('emails_waiting');        return $result->row();    }//-------------------ADDS------------------------//    //Add email to emails_waiting and increase number of emails waiting in quotes by 1    function emails_mass_add_to_waiting($addArray)    {        $this->db->insert('emails_waiting', $addArray);        $nid = $this->db->insert_id();        $this->db->where('id', $addArray['qid']);        $q = $this->db->get('quotes');        $this->db->where('id', $addArray['qid']);        $this->db->update('quotes', array('emailsWait'=>($q->row()->emailsWait+1)));        return $nid;    }    //Add mass dispatch to queue    function emails_mass_add_queue_item($addArray)    {        $this->db->insert('emails_mass_queue', $addArray);        $new_id = $this->db->insert_id();        return $new_id;    }    //Create an empty (no subscribers) list on Mailchimp    function mc_list_create()    {        $args = array(            'name'=>"MASS_LIST_DO_NOT_DELETE",            'contact'=>array(                'company'=>"Greenlogic",                'address1'=>"Street adress",                'city'=>"city?",                'state'=>"state?",                'zip'=>"zip?",                'country'=>"USA"            ),            'permission_reminder'=>"How you signed this list",            'campaign_defaults'=>array(                'from_name'=>"Dan Kutcher",                'from_email'=>"info@greenlogicauto.com",                'subject'=>"Default subject",                'language'=>"English"            ),            'email_type_option'=>false        );        $curl = curl_init(MAILCHIMP_SERVER_URL.'/lists');        curl_setopt($curl, CURLOPT_POST, true);        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'POST');        curl_setopt($curl, CURLOPT_USERPWD, MAILCHIMP_API_KEY );        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($curl, CURLOPT_HEADER, false);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);        curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($args));        $response = curl_exec($curl);        $response = json_decode($response, 1);        return $response;    }    //Add subscriber to list on Mailchimp    function mc_list_member_add($memberId, $list_id, $args)    {        $curl = curl_init(MAILCHIMP_SERVER_URL.'/lists/'.$list_id.'/members/'.$memberId);        curl_setopt($curl, CURLOPT_POST, true);        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'PUT');        curl_setopt($curl, CURLOPT_USERPWD, MAILCHIMP_API_KEY );        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($curl, CURLOPT_HEADER, false);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);        curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($args));        $response = curl_exec($curl);        $res = json_decode($response, 1);        return $res;    }    //Create an empty (no template) campaign on Mailchimp    function mc_campaign_create($mc_listid, $email)    {        $args = array(            'type' => "regular",            'recipients' => array(                'list_id' => $mc_listid            ),            'settings' => array(                'subject_line' => $email->subject,                'title' => "MASS_SEND_DO_NOT_DELETE",                'from_name' => $email->enfrom,                'reply_to' => 'info@greenlogicauto.com',//$email->replyto,                'fb_comments' => false            )        );        $curl = curl_init(MAILCHIMP_SERVER_URL.'/campaigns');        curl_setopt($curl, CURLOPT_POST, true);        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'POST');        curl_setopt($curl, CURLOPT_USERPWD, MAILCHIMP_API_KEY );        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($curl, CURLOPT_HEADER, false);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);        curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($args));        $response = curl_exec($curl);        $res = json_decode($response, 1);        return $res;    }    //Check campaign's send conditions    function mc_checklist($campaign_id)    {        $curl = curl_init(MAILCHIMP_SERVER_URL.'/campaigns/'.$campaign_id.'/send-checklist');        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'GET');        curl_setopt($curl, CURLOPT_USERPWD, MAILCHIMP_API_KEY );        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($curl, CURLOPT_HEADER, false);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);        curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);        $response = curl_exec($curl);        $res = json_decode($response, 1);        return $res;    }//-------------------SETS------------------------//    //Обновить активность эмейла квоты    function set_quote_status($qid, $new_status)    {        $this->db->where('id', $qid);        $this->db->update('quotes', array('activeEmail'=>$new_status));    }    /**    Update sended email status    0 = NOT OPEN; 1 = OPENED; 2 = BOUNCED     */    function set_emails_sended_status_by_id($emails_sended_id, $new_status){        $this->db->set('status', $new_status, FALSE);        $this->db->where('id', $emails_sended_id);        $this->db->update('emails_sended');    }    //Assign merge fields to list on Mailchimp    function mc_list_merge_fields_assign($mc_listid, $merge_fields)    {        $merge_fields = str_replace(array(0=>"*|", 1=>"|*"), "", $merge_fields);        foreach ($merge_fields as $key => $value)        {            $args = array(                'tag'=>$value,                'name'=>$key,                'type'=>"text"            );            $curl = curl_init(MAILCHIMP_SERVER_URL.'/lists/'.$mc_listid.'/merge-fields');            curl_setopt($curl, CURLOPT_POST, true);            curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'POST');            curl_setopt($curl, CURLOPT_USERPWD, MAILCHIMP_API_KEY );            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);            curl_setopt($curl, CURLOPT_HEADER, false);            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);            curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);            curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($args));            $response = curl_exec($curl);            $response = json_decode($response, 1);            if(isset($response['status']) AND isset($response['detail']))            {                return $response;            }        }        return 0;    }    //Set email template for compaign on Mailchimp    function mc_campaign_content_set($campaign_id, $email)    {        $etext = $this->emails->mailchimp_tags_convert($email->text);        $isOpenPic = "<img src='".base_url()."img/isopenchimp.php?e=*|EMID|*' style='display:none; width:1px; height:1px;'/>";        $esid = "`EMID *|EMID|*`";        $em = "|>*|EMAIL|*<|";        $args = array(            'html' =>stripslashes($etext).$isOpenPic.$esid.$em        );        $curl = curl_init(MAILCHIMP_SERVER_URL.'/campaigns/'.$campaign_id.'/content');        curl_setopt($curl, CURLOPT_POST, true);        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'PUT');        curl_setopt($curl, CURLOPT_USERPWD, MAILCHIMP_API_KEY );        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($curl, CURLOPT_HEADER, false);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);        curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($args));        $response = curl_exec($curl);        $res = json_decode($response, 1);        return $res;    }    //Fill data to mass dispatch idendificator    function email_mass_update_queue_item($addArray)    {        $this->db->set('date_launched', $addArray['date_launched']);        $this->db->set('sended_id', $addArray['sended_id']);        $this->db->where('mass_id', $addArray['mass_id']);        $this->db->update('emails_mass_queue');    }    function set_techmail_waiting_mass_id($techmailid){        $this->db->where('id', $techmailid);        $this->db->update('emails_waiting', array('mass_id'=>$techmailid));    }    function mailchimp_tags_convert($text)    {        $chArray = array(            '[quote_number]'=>'*|QUOTE_NUMB|*',            '[order_number]'=>'*|ORDRNBR|*',            '[first_name]'=>'*|FIRST_NAME|*',            '[origin_state_code]'=>'*|ORG_ST_COD|*',            '[destination_state_code]'=>'*|DESTSTCODE|*',            '[vehicle_list]'=>'*|VHCL_LIST|*',            '[ship_via]'=>'*|SHIP_VIA|*',            '[operable_inop]'=>'*|OPR_INOP|*',            '[estimated_load_date]'=>'*|ESTLOADDT|*',            '[estimated_delivery_date]'=>'*|ESTDLVRDAT|*',            '[deposit_required]'=>'*|DEPOSREQ|*',            '[pickup_contact]'=>'*|PCKCNTCT|*',            '[pickup_phone]'=>'*|PCKPHN|*',            '[pickup_phone2]'=>'*|PCKPHN2|*',            '[pickup_phone3]'=>'*|PCKPHN3|*',            '[pickup_phone_cell]'=>'*|PCKPHNCELL|*',            '[pickup_address]'=>'*|PCKADRSS|*',            '[pickup_city]'=>'*|PCKCITY|*',            '[pickup_state_code]'=>'*|PCKSTCODE|*',            '[dropoff_contact]'=>'*|DRPCNTCT|*',            '[dropoff_phone]'=>'*|DRPPHN|*',            '[dropoff_phone2]'=>'*|DRPPHN2|*',            '[dropoff_phone3]'=>'*|DRPPHN3|*',            '[dropoff_phone_cell]'=>'*|DRPPHNCELL|*',            '[dropoff_address]'=>'*|DRPADR|*',            '[dropoff_city]'=>'*|DRPCITY|*',            '[dropoff_state_code]'=>'*|DRPSTCODE|*',            '[note_to_shipper]'=>'*|NOTESHIP|*',            '[u_name]'=>'*|UNAME|*',            '[cod_amount]'=>'*|COD|*',            '[first_pickup_date]'=>'*|FPCKDATE|*',            '[tariff]'=>'*|TARIFF|*',            '[phone]'=>'*|PHONE|*',            '[vehicle_make]'=>'*|VHCLMAKE|*',            '[vehicle_model]'=>'*|VHCLMDL|*',            '[origin_city]'=>'*|ORGCITY|*',            '[destination_city]'=>'*|DESTCITY|*',            '[estimated_ship_date]'=>'*|ESTSHPDATE|*',            '[EID]'=>'*|EID|*',            '[Qid]'=>'*|QID|*',            '[Eid]'=>'*|EID2|*',            '[carrier_name]'=>'*|CARIENAME|*',            '[carrier_phone1]'=>'*|CARIEPHONE|*',            '[driver_phone]'=>'*|DRIVPHONE|*',            '[carrier_phone2]'=>'*|CARIEPHN2|*',            '[token]'=>'*|TOKEN|*',        );        return str_replace(array_keys($chArray), $chArray, $text);    }//-------------------DELETES------------------------//    //Delete list on Mailchimp    function mc_list_delete($list_id)    {        $curl = curl_init(MAILCHIMP_SERVER_URL.'/lists/'.$list_id);        //curl_setopt($curl, CURLOPT_POST, true);        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'DELETE');        curl_setopt($curl, CURLOPT_USERPWD, MAILCHIMP_API_KEY );        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($curl, CURLOPT_HEADER, false);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);        curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);        //curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($args));        $response = curl_exec($curl);        $res = json_decode($response, 1);    }    //Delete campaign on Mailchimp    function mc_campaign_delete($campaign_id)    {        $curl = curl_init(MAILCHIMP_SERVER_URL.'/campaigns/'.$campaign_id);        //curl_setopt($curl, CURLOPT_POST, true);        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'DELETE');        curl_setopt($curl, CURLOPT_USERPWD, MAILCHIMP_API_KEY );        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($curl, CURLOPT_HEADER, false);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);        curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);        //curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($args));        $response = curl_exec($curl);        $res = json_decode($response, 1);    }    //Delete mass dispatch identificator from emails_mass_queue by id    function emails_mass_delete_queue_item($tech_id)    {        $this->db->where('id', $tech_id);        $this->db->delete('emails_mass_queue');    }    //Delete campaign and list on Mailchimp, delete  mass sended emails and delete mass dispatch queue item. Function used in case of error    function email_mass_error_clear($mass_id){        $mass_item = $this->email_mass_get_queue_item_by_mass_id($mass_id);        $response_delete_campaign = $this->emails->mc_campaign_delete($mass_item->campaign_id);        $response_delete_list = $this->emails->mc_list_delete($mass_item->list_id);        $this->db->where('mass_id', $mass_item->mass_id);        $this->db->delete('emails_sended');        $this->emails->emails_mass_delete_queue_item($mass_item->id);    }//-------------------OTHER------------------------//    //Move waiting emails to sended emails after mass launch (Mailchimp)    function email_mass_waiting_to_sended($id)    {        $wemail = $this->get_wemail_by_id($id);        $addArray = array(            'qid'=>$wemail->qid,            'status'=>0,            'atDate'=>date('Y-m-d H:i:s'),            'eid'=>$wemail->eid,            'openedDate'=>date('0000-00-00 00:00:00'),            'specEmail'=>$wemail->specEmail,            'openIP'=>"",            'viewit'=>0,            'mandrill_id'=>0,            'mass_id'=>$wemail->mass_id        );        $newid = $this->add_email_to_sended($addArray);        $this->delete_email_form_wating($id);        return $newid;    }    //Fill and return arguments array dedicated to Mailchimp    /**    function mc_list_member_create_args($qid, $merge_fields, $sendedid, $istech = 0)    {    $quote = $this->quotes->get_quote_order_by_id($qid);    if($quote->shipVia == 0){    $shipVia = "Open";    }else if($quote->shipVia == 1){    $shipVia = "Enclosed";    }else if($quote->shipVia == 2){    $shipVia = "Flat Bed Transport";    }else if($quote->shipVia == 3){    $shipVia = "Other";    }    if($quote->vechinesRun == 0){    $vechinesRun = "Run";    }else{    $vechinesRun = "INOP";    }    $this->db->where('id', $quote->driverid);    $driver = $this->db->get('drivers')->row();    if(!isset($driver->name)) $driver = new stdClass();    if(!isset($quote->dPhone3)) $quote->dPhone3 = "none";    if(!isset($driver->name)) $driver->name = "none";    if(!isset($driver->phone)) $driver->phone = "none";    if(!isset($driver->mobile)) $driver->mobile = "none";    if(!isset($driver->phone2)) $driver->phone2 = "none";    $this->db->where('id', $this->session->userdata('uid'));    $user = $this->db->get('users_crm')->row();    $merge_values = array(    '[quote_number]'=>str_pad($quote->id, 5,"0",STR_PAD_LEFT),    '[order_number]'=>str_pad($quote->id, 5,"0",STR_PAD_LEFT),    '[first_name]'=>trim($quote->FirstName),    '[origin_state_code]'=>trim($quote->distFromState),    '[destination_state_code]'=>trim($quote->distToState),    '[vehicle_list]'=>trim($quote->carYear)." ".trim($quote->carMake)." ".trim($quote->carModel),    '[ship_via]'=>trim($shipVia),    '[operable_inop]'=>trim($vechinesRun),    '[estimated_load_date]'=>date('m/d/Y', strtotime($quote->LoadDate)),    '[estimated_delivery_date]'=>date('m/d/Y', strtotime($quote->DeliveryDate)),    '[deposit_required]'=>$quote->deposit,    '[pickup_contact]'=>trim($quote->pFname),    '[pickup_phone]'=>trim($quote->pPhone),    '[pickup_phone2]'=>trim($quote->pPhone2),    '[pickup_phone3]'=>trim($quote->pPhone3),    '[pickup_phone_cell]'=>trim($quote->pMobile),    '[pickup_address]'=>trim($quote->pAddrStreet),    '[pickup_city]'=>trim($quote->pAddrCity),    '[pickup_state_code]'=>trim($quote->pAddrState),    '[dropoff_contact]'=>trim($quote->dFname),    '[dropoff_phone]'=>trim($quote->dPhone),    '[dropoff_phone2]'=>trim($quote->dPhone2),    '[dropoff_phone3]'=>trim($quote->dPhone3),    '[dropoff_phone_cell]'=>trim($quote->dMobile),    '[dropoff_address]'=>trim($quote->dAddrStreet),    '[dropoff_city]'=>trim($quote->dAddrCity),    '[dropoff_state_code]'=>trim($quote->dAddrState),    '[note_to_shipper]'=>trim($quote->forShipperNotes),    '[u_name]'=>"Dan Kutcher",    '[cod_amount]'=>trim($quote->CarrierPay),    '[first_pickup_date]'=>date('m/d/Y', strtotime($quote->LoadDate)),    '[tariff]'=>($quote->price+$quote->deposit),    '[phone]'=>trim($quote->Phone),    '[vehicle_make]'=>trim($quote->carMake),    '[vehicle_model]'=>trim($quote->carModel),    '[origin_city]'=>trim($quote->distFromCity),    '[destination_city]'=>trim($quote->distToCity),    '[estimated_ship_date]'=>date('m/d/Y', strtotime($quote->arriveDate)),    '[EID]'=>$quote->id,    '[Qid]'=>$quote->id,    '[Eid]'=>$quote->id,    '[carrier_name]'=>trim($driver->name),    '[carrier_phone1]'=>trim($driver->phone),    '[driver_phone]'=>trim($driver->mobile),    '[carrier_phone2]'=>trim($driver->phone2),    '[token]'=>md5($quote->Email.$quote->id)    );    //$tmparr = array('ESID' => (string)$sendedid);    $merge_fields = str_replace(array("*|", "|*"), "", $merge_fields);    foreach ($merge_fields as $key => $value)    {    if(array_key_exists($key, $merge_values))    {    $tmparr[$value] = $merge_values[$key];    }    }    if($istech)    {    $techadresskey = $sendedid % 5;    switch ($techadresskey){            //[TECHADRESS]    case 0: $email_address = MAILCHIMP_TECHADRESS1_EMAIL;    break;    case 1: $email_address = MAILCHIMP_TECHADRESS2_EMAIL;    break;    case 2: $email_address = MAILCHIMP_TECHADRESS3_EMAIL;    break;    case 3: $email_address = MAILCHIMP_TECHADRESS4_EMAIL;    break;    case 4: $email_address = MAILCHIMP_TECHADRESS5_EMAIL;    break;    }    }    else    {    $email_address = $quote->Email;    }    $args = array(    'email_address' => $email_address,    'email_type' => "html",    'status' => "subscribed",    'merge_fields' => $tmparr    );    return $args;    }     */    function mc_list_member_create_args($qid, $merge_fields, $techmailid, $istech = 0)    {        $quote = $this->quotes->get_quote_order_by_id($qid);        if($quote->shipVia == 0){            $shipVia = "Open";        }else if($quote->shipVia == 1){            $shipVia = "Enclosed";        }else if($quote->shipVia == 2){            $shipVia = "Flat Bed Transport";        }else if($quote->shipVia == 3){            $shipVia = "Other";        }        if($quote->vechinesRun == 0){            $vechinesRun = "Run";        }else{            $vechinesRun = "INOP";        }        $this->db->where('id', $quote->driverid);        $driver = $this->db->get('drivers')->row();        if(!isset($driver->name)) $driver = new stdClass();        if(!isset($quote->dPhone3)) $quote->dPhone3 = "none";        if(!isset($driver->name)) $driver->name = "none";        if(!isset($driver->phone)) $driver->phone = "none";        if(!isset($driver->mobile)) $driver->mobile = "none";        if(!isset($driver->phone2)) $driver->phone2 = "none";        $this->db->where('id', $this->session->userdata('uid'));        $user = $this->db->get('users_crm')->row();        $merge_values = array(            '[quote_number]'=>str_pad($quote->id, 5,"0",STR_PAD_LEFT),            '[order_number]'=>str_pad($quote->id, 5,"0",STR_PAD_LEFT),            '[first_name]'=>trim($quote->FirstName),            '[origin_state_code]'=>trim($quote->distFromState),            '[destination_state_code]'=>trim($quote->distToState),            '[vehicle_list]'=>trim($quote->carYear)." ".trim($quote->carMake)." ".trim($quote->carModel),            '[ship_via]'=>trim($shipVia),            '[operable_inop]'=>trim($vechinesRun),            '[estimated_load_date]'=>date('m/d/Y', strtotime($quote->LoadDate)),            '[estimated_delivery_date]'=>date('m/d/Y', strtotime($quote->DeliveryDate)),            '[deposit_required]'=>$quote->deposit,            '[pickup_contact]'=>trim($quote->pFname),            '[pickup_phone]'=>trim($quote->pPhone),            '[pickup_phone2]'=>trim($quote->pPhone2),            '[pickup_phone3]'=>trim($quote->pPhone3),            '[pickup_phone_cell]'=>trim($quote->pMobile),            '[pickup_address]'=>trim($quote->pAddrStreet),            '[pickup_city]'=>trim($quote->pAddrCity),            '[pickup_state_code]'=>trim($quote->pAddrState),            '[dropoff_contact]'=>trim($quote->dFname),            '[dropoff_phone]'=>trim($quote->dPhone),            '[dropoff_phone2]'=>trim($quote->dPhone2),            '[dropoff_phone3]'=>trim($quote->dPhone3),            '[dropoff_phone_cell]'=>trim($quote->dMobile),            '[dropoff_address]'=>trim($quote->dAddrStreet),            '[dropoff_city]'=>trim($quote->dAddrCity),            '[dropoff_state_code]'=>trim($quote->dAddrState),            '[note_to_shipper]'=>trim($quote->forShipperNotes),            '[u_name]'=>"Dan Kutcher",            '[cod_amount]'=>trim($quote->CarrierPay),            '[first_pickup_date]'=>date('m/d/Y', strtotime($quote->LoadDate)),            '[tariff]'=>($quote->price+$quote->deposit),            '[phone]'=>trim($quote->Phone),            '[vehicle_make]'=>trim($quote->carMake),            '[vehicle_model]'=>trim($quote->carModel),            '[origin_city]'=>trim($quote->distFromCity),            '[destination_city]'=>trim($quote->distToCity),            '[estimated_ship_date]'=>date('m/d/Y', strtotime($quote->arriveDate)),            '[EID]'=>$quote->id,            '[Qid]'=>$quote->id,            '[Eid]'=>$quote->id,            '[carrier_name]'=>trim($driver->name),            '[carrier_phone1]'=>trim($driver->phone),            '[driver_phone]'=>trim($driver->mobile),            '[carrier_phone2]'=>trim($driver->phone2),            '[token]'=>md5($quote->Email.$quote->id)        );        $tmparr = array('EMID' => (string)$techmailid);        $merge_fields = str_replace(array("*|", "|*"), "", $merge_fields);        foreach ($merge_fields as $key => $value)        {            if(array_key_exists($key, $merge_values))            {                $tmparr[$value] = $merge_values[$key];            }        }        if($istech)        {            $techadresskey = $techmailid % 5;            switch ($techadresskey){            //[TECHADRESS]                case 0: $email_address = MAILCHIMP_TECHADRESS1_EMAIL;                    break;                case 1: $email_address = MAILCHIMP_TECHADRESS2_EMAIL;                    break;                case 2: $email_address = MAILCHIMP_TECHADRESS3_EMAIL;                    break;                case 3: $email_address = MAILCHIMP_TECHADRESS4_EMAIL;                    break;                case 4: $email_address = MAILCHIMP_TECHADRESS5_EMAIL;                    break;            }        }        else        {            $email_address = $quote->Email;        }        $args = array(            'email_address' => $email_address,            'email_type' => "html",            'status' => "subscribed",            'merge_fields' => $tmparr        );        return $args;    }    //Send campaign on Mailchimp    function mc_campaign_send($campaign_id)    {        $curl = curl_init(MAILCHIMP_SERVER_URL.'/campaigns/'.$campaign_id.'/actions/send');        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'POST');        curl_setopt($curl, CURLOPT_USERPWD, MAILCHIMP_API_KEY );        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($curl, CURLOPT_HEADER, false);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);        curl_setopt($curl, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);        $response = curl_exec($curl);        $res = json_decode($response, 1);        return $res;    }    // EMAIL reader part    function getParts($object, & $parts){        // Object is multipart        if ($object->type == 1) {            foreach ($object->parts as $part){                $this->getParts($part, $parts);            }        }else{            $p['type'] = $object->type;            $p['encode'] = $object->encoding;            $p['subtype'] = $object->subtype;            $p['bytes'] = $object->bytes;            if ($object->ifparameters == 1) {                foreach ($object->parameters as $param){                    $p['params'][] = array('attr' => $param->attribute,                        'val'  => $param->value);                }            }            if ($object->ifdparameters == 1) {                foreach ($object->dparameters as $param){                    $p['dparams'][] = array('attr' => $param->attribute,                        'val'  => $param->value);                }            }            $p['disp'] = null;            if ($object->ifdisposition == 1) {                $p['disp'] = $object->disposition;            }            $parts[] = $p;        }    }//----------------------------MAILCHIMP MODELS END------------------------------//}