<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Emails extends CRM_Controller {       public function __construct()    {        parent::__construct();        //$user = $this->autorize();		//$this->user =  $user;    }          	public function index()	{        exit();	}	// Получаем список отправленных писем для пользователя	public function get_quote_sended(){	  	$data['qid'] = $qid = $this->input->post('qid');	    	    $data['sendedEmails'] = $this->emails->get_sended_stat($qid);	    if(count($data['sendedEmails']) > 0){		    $counter = 0;		  	$result = "";		  	foreach($data['sendedEmails'] as $item){		  		$item->atDate = $this->showDate($item->atDate);		  		$result[$counter] = $item;		  		$counter++;		  	}		  	$data['sendedEmails'] = $result;	    }	  	$data['recivedEmails'] = $this->emails->get_recived_stat($qid);	  	if(count($data['recivedEmails']) > 0){		  	$counter = 0;		  	$result = "";		  	foreach($data['recivedEmails'] as $item){		  		$item->atDate = $this->showDate($item->atDate);		  		$result[$counter] = $item;		  		$counter++;		  	}		  	$data['recivedEmails'] = $result;	    }	  	$data['waitingEmails'] = $this->emails->get_waiting_stat($qid);	  	if(count($data['waitingEmails']) > 0){		  	$counter = 0;		  	$result = "";		  	foreach($data['waitingEmails'] as $item){		  		$item->atDate = $this->showDate($item->atDate);		  		$result[$counter] = $item;		  		$counter++;		  	}		  	$data['waitingEmails'] = $result;	  	}	  	$data['emails'] = $this->emails->get_all_emails_names();		$this->load->view('admin/parts/emails_sended', $data);	}	// massLaunch Block show	public function mass_launch_block(){		$qid = $this->input->post('qid');			  			$data['qid'] = $qid = $this->input->post('qid');		$data['quote'] = $this->quotes->get_quote_by_id($qid);	    	    $data['sendedEmails'] = $this->emails->get_sended_stat($qid);	    if(count($data['sendedEmails']) > 0){		    $counter = 0;		  	$result = "";		  	foreach($data['sendedEmails'] as $item){		  		$item->atDate = $this->showDate($item->atDate);		  		$result[$counter] = $item;		  		$counter++;		  	}		  	$data['sendedEmails'] = $result;	    }	  	$data['recivedEmails'] = $this->emails->get_recived_stat($qid);	  	if(count($data['recivedEmails']) > 0){		  	$counter = 0;		  	$result = "";		  	foreach($data['recivedEmails'] as $item){		  		$item->atDate = $this->showDate($item->atDate);		  		$result[$counter] = $item;		  		$counter++;		  	}		  	$data['recivedEmails'] = $result;	    }	  	$data['waitingEmails'] = $this->emails->get_waiting_stat($qid);	  	if(count($data['waitingEmails']) > 0){		  	$counter = 0;		  	$result = "";		  	foreach($data['waitingEmails'] as $item){		  		$item->atDate = $this->showDate($item->atDate);		  		$result[$counter] = $item;		  		$counter++;		  	}		  	$data['waitingEmails'] = $result;	  	}	  	$data['emails'] = $this->emails->get_all_emails_names();	  	$data['qid'] = $qid;	  		  	//ADDED->        $data['sendedSms'] = $this->emails->get_sended_sms_stat($qid);        if(count($data['sendedSms']) > 0){            $counter = 0;            $result = "";            foreach($data['sendedSms'] as $item){                $item->atDate = $this->showDate($item->atDate);                $result[$counter] = $item;                $counter++;            }            $data['sendedSms'] = $result;        }            /*$data['recivedSms'] = $this->emails->get_recived_sms_stat($qid);            if(count($data['recivedSms']) > 0){                $counter = 0;                $result = "";                foreach($data['recivedSms'] as $item){                    $item->atDate = $this->showDate($item->atDate);                    $result[$counter] = $item;                    $counter++;                }                $data['recivedSms'] = $result;            }*/            $data['waitingSms'] = $this->emails->get_waiting_sms_stat($qid);            if(count($data['waitingSms']) > 0){                $counter = 0;                $result = "";                foreach($data['waitingSms'] as $item){                    $item->atDate = $this->showDate($item->atDate);                    $result[$counter] = $item;                    $counter++;                }                $data['waitingSms'] = $result;            }            $data['sms'] = $this->emails->get_all_sms_names();            $data['qid'] = $qid;        //<-ADDED	  	//echo $qid;	  //	$ML = explode('`', $qid);	  	//$data['MLcount'] = count($ML)-1;	  	$this->load->view('admin/parts/masslaunch', $data);	}	// massLaunch Block show	public function drivers_launch_block(){		$qid = $this->input->post('qid');			  	$data['quote_id'] = $quote_id = $this->input->post('quote_id');		$data['qid'] = $qid = $this->input->post('qid');		$data['driver'] = $this->drivers->get_driver_by_id($qid);		//$data['quote'] = $this->quotes->get_quote_by_id($qid);	    	    $data['sendedEmails'] = $this->emails->get_drivers_sended_stat($qid);	    if(count($data['sendedEmails']) > 0){		    $counter = 0;		  	$result = "";		  	foreach($data['sendedEmails'] as $item){		  		$item->atDate = $this->showDate($item->atDate);		  		$result[$counter] = $item;		  		$counter++;		  	}		  	$data['sendedEmails'] = $result;	    }	  	$data['recivedEmails'] = $this->emails->get_drivers_recived_stat($qid);	  	if(count($data['recivedEmails']) > 0){		  	$counter = 0;		  	$result = "";		  	foreach($data['recivedEmails'] as $item){		  		$item->atDate = $this->showDate($item->atDate);		  		$result[$counter] = $item;		  		$counter++;		  	}		  	$data['recivedEmails'] = $result;	    }	  		  	$data['emails'] = $this->emails->get_drivers_emails_names();	  	$data['qid'] = $qid;	  	//echo $qid;	  //	$ML = explode('`', $qid);	  	//$data['MLcount'] = count($ML)-1;	  	$this->load->view('admin/parts/driverlauncher', $data);	}	// emptyLaunch Block show	public function empty_launch_block(){		$qid = $this->input->post('qid');			  			$data['qid'] = $qid = $this->input->post('qid');		$data['quote'] = $this->quotes->get_quote_by_id($qid);	    	    $data['sendedEmails'] = $this->emails->get_sended_stat($qid);	    if(count($data['sendedEmails']) > 0){		    $counter = 0;		  	$result = "";		  	foreach($data['sendedEmails'] as $item){		  		$item->atDate = $this->showDate($item->atDate);		  		$result[$counter] = $item;		  		$counter++;		  	}		  	$data['sendedEmails'] = $result;	    }	  	$data['recivedEmails'] = $this->emails->get_recived_stat($qid);	  	if(count($data['recivedEmails']) > 0){		  	$counter = 0;		  	$result = "";		  	foreach($data['recivedEmails'] as $item){		  		$item->atDate = $this->showDate($item->atDate);		  		$result[$counter] = $item;		  		$counter++;		  	}		  	$data['recivedEmails'] = $result;	    }	  	$data['waitingEmails'] = $this->emails->get_waiting_stat($qid);	  	if(count($data['waitingEmails']) > 0){		  	$counter = 0;		  	$result = "";		  	foreach($data['waitingEmails'] as $item){		  		$item->atDate = $this->showDate($item->atDate);		  		$result[$counter] = $item;		  		$counter++;		  	}		  	$data['waitingEmails'] = $result;	  	}	  	//$data['emails'] = $this->emails->get_all_emails_names();	  	$data['qid'] = $qid;	  	//echo "0";		//exit();	  	//echo $qid;	  //	$ML = explode('`', $qid);	  	//$data['MLcount'] = count($ML)-1;	  	$this->load->view('admin/parts/emptylauncher', $data);	}  	// Добавляем в очередь рассылки 	public function add_email_to_send(){		$user = $this->autorize();		$this->user =  $user;		$qid = $this->input->post('qid');		$eid = $this->input->post('eid');		$specEmail = $this->input->post('specEmail');				$ismass = $this->input->post('ismass');		if($ismass == 1){			$qids = explode('`', $qid);			foreach($qids as $qid){				$emailInfo = $this->emails->get_email_by_id($eid);				$date = $this->input->post('date');				$addArray = array(					'eid'=>$eid,					'qid'=>$qid,					'atDate'=>date('Y-m-d H:i:s'),					'sendAtDate'=>date('Y-m-d H:i:s', strtotime($date)),					'specEmail'=>"-"					);				$newid = $this->emails->add_to_send_process($addArray);				$this->statistic->email_send_action($qid, $user->id, "ADD (MASS) EMAIL TO SEND (".$emailInfo->name.")", -1);			}		}else{				$emailInfo = $this->emails->get_email_by_id($eid);				$date = $this->input->post('date');				$addArray = array(					'eid'=>$eid,					'qid'=>$qid,					'atDate'=>date('Y-m-d H:i:s'),					'sendAtDate'=>date('Y-m-d H:i:s', strtotime($date)),					'specEmail'=>$specEmail,					'send_type'=>1					);				$newid = $this->emails->add_to_send_process($addArray);				$this->statistic->email_send_action($qid, $user->id, "ADD EMAIL TO SEND (".$emailInfo->name.")", -1);		}	}		/* // Формирование спика расылки для раздела  public function add_mails_waiting(){  	$qid = $this->input->post('qid');  	$stype = $this->input->post('stype');  	switch($stype){  		case "LEADS":  			$emails = $this->emails->get_all_emails('1');  			break;  		case "QUOTES":  			$emails = $this->emails->get_all_emails('0');  			break;  		case "ORDERS":  			$emails = $this->emails->get_all_emails('2');  			break;  	}  	foreach($emails as $email){				$emailInfo = $this->emails->get_email_by_id($email->id);		//$date = $this->input->post('date');		$addArray = array(			'eid'=>$email->id,			'qid'=>$qid,			'atDate'=>date('Y-m-d H:i:s'),			'sendAtDate'=>date('Y-m-d H:i:s', (time()+$email->sendAfterPrev))		);		$newid = $this->emails->add_to_send_process($addArray);  	}  }  */ 	// Отправляем конкретное писмои из базы  public function send_one_email(){ 	$eid = $this->input->post('eid'); 	$qid = $this->input->post('qid');	$wid = $this->input->post('wid'); 	$quote = $this->quotes-> get_quote_by_id($qid); 	$this->send_email($eid, $quote->Email, $qid, $wid); } // Отправка письма private function send_email($eid, $to, $qid, $wid){ 	//echo $eid; 	$quote = $this->quotes->get_quote_order_by_id($qid); 	 	$Wemail = $this->emails->get_wemail_by_id($wid); 	if(($Wemail->specEmail == "")||($Wemail->specEmail == "-")){ 		$to = $to;	 	}else{ 		$to = $Wemail->specEmail; 	} 	$esid = $this->emails->update_email_us_sent($wid); 	$isOpenPic = "<img src='".base_url()."img/isopen.php?e=".$esid."' style='display:none; width:1px; height:1px;'/>"; 	 	$email = $this->emails->get_email_by_id($eid);  	$args = array(    	'key' => 'K-ZY5J4LtIG5e2WCmTgITg',    	'message' => array(        	"html" => $this->emails->update_email_values(stripslashes($email->text).$isOpenPic, $quote),       	 	"text" => null,        	"from_email" => $email->efrom,        	"from_name" => $email->enfrom,        	"subject" => $this->emails->update_email_values(stripslashes($email->subject), $quote),        	"to" => array(array("email" => $to)),        	"track_opens" => true,        	"track_clicks" => true    	)	);	if($email->replyto != ""){		$args['message']['headers'] = array('Reply-To' => $email->replyto);	}	if($email->bcc != ""){		$args['message']['bcc_address'] = $email->bcc;	}	//echo $to;		$curl = curl_init('https://mandrillapp.com/api/1.0/messages/send.json' );	curl_setopt($curl, CURLOPT_POST, true);	curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);	curl_setopt($curl, CURLOPT_HEADER, false);	curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);	curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));	curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($args));	$response = curl_exec($curl);	//echo "a";	//print_r($response);			$res = json_decode($response);		//if((isset($res[0]))) {		//$mandrill_id = $res[0]->_id;		//echo "b";	//}else{		$mandrill_id = 0;	//	echo "c";	//}//echo "a";	$this->db->where('id', $esid);	$this->db->update('emails_sended', array('mandrill_id' => $mandrill_id));	// $this->emails->delete_email_form_wating($wid);	$this->statistic->email_send_action($qid, '0', "SENT EMAIL (".$email->name.")", -1);	  }// ---------------------------- SENDPULSE =======================  public function send_email_sendpulse($eid, $to, $qid, $wid){  	$quote = $this->quotes->get_quote_order_by_id($qid); 	 	$Wemail = $this->emails->get_wemail_by_id($wid); 	if(($Wemail->specEmail == "")||($Wemail->specEmail == "-")){ 		$to = $to;	 	}else{ 		$to = $Wemail->specEmail; 	} 	$esid = $this->emails->update_email_us_sent($wid); 	$isOpenPic = "<img src='".base_url()."img/isopen.php?e=".$esid."' style='display:none; width:1px; height:1px;'/>";  	 	//$esid = $this->emails->update_email_us_sent($wid);    $SPApiProxy = new SendpulseApi( API_USER_ID, API_SECRET, TOKEN_STORAGE );	$email = $this->emails->get_email_by_id($eid);    // Send mail using SMTP    $emailE = array(        'html' => $this->emails->update_email_values(stripslashes($email->text).$isOpenPic, $quote),        'text' => '-',        'subject' => $this->emails->update_email_values(stripslashes($email->subject), $quote),        'from' => array(            'name' => trim($email->enfrom),            'email' => trim($email->efrom)        ),        'to' => array(array('name' => trim($quote->FirstName),"email" => trim($to)))    );    if($email->bcc != ""){    	 $emailE['bcc'] = array(            array(            	'name' => 'John Doe',                'email' => trim($email->bcc)            )        );    }    if($email->replyto != ""){		$emailE['headers'] = array('Reply-To' => $email->replyto);	}    ob_start();	var_dump($SPApiProxy->smtpSendMail($emailE));	$result = ob_get_clean();    //var_dump();    $this->db->where('id', $esid);	$this->db->update('emails_sended', array('mandrill_id' => $result));	// $this->emails->delete_email_form_wating($wid);	$this->statistic->email_send_action($qid, '0', "SENT EMAIL (".$email->name.")", -1);  }// ---------------------------- [END] ===========================    // Отмечаем как прочитаное письмо  function chEmailstatus($eid){    	$this->db->where('id', $eid);  	$es = $this->db->get('emails_sended')->row();  	$this->db->where('id', $es->qid);  	$this->db->update('quotes', array('activeEmail'=>1));  	if($es->status == 0){		  	$this->db->set('emailsOpened', 'emailsOpened+1', FALSE);		$this->db->where('id', $es->qid);		$this->db->update('quotes');	}  	//$this->db->where('id', $es->qid);  	//$this->db->update('quotes', array('activeEmail'=>1));	// $ipaddress = '';    if (isset($_SERVER['HTTP_CLIENT_IP']))        $ipaddress = $_SERVER['HTTP_CLIENT_IP'];    else if(isset($_SERVER['HTTP_X_FORWARDED_FOR']))        $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];    else if(isset($_SERVER['HTTP_X_FORWARDED']))        $ipaddress = $_SERVER['HTTP_X_FORWARDED'];    else if(isset($_SERVER['HTTP_FORWARDED_FOR']))        $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];    else if(isset($_SERVER['HTTP_FORWARDED']))        $ipaddress = $_SERVER['HTTP_FORWARDED'];    else if(isset($_SERVER['REMOTE_ADDR']))        $ipaddress = $_SERVER['REMOTE_ADDR'];    else        $ipaddress = 'UNKNOWN';	  	$this->db->where('id', $eid);  	$this->db->update('emails_sended', array('status'=>1, 'openedDate'=>date('Y-m-d H:i:s'), 'openIP'=>$ipaddress));  	$this->statistic->email_send_action($es->qid, '0', "OPENED EMAIL (".$es->qid.")", '1');  }  // Удалить из очереди рассылки  function delete_email_waiting(){  	$wid = $this->input->post('wid');  	$this->emails->delete_email_from_waiting($wid);  } // Разослать все письма из рассылки  function send_all_waiting(){  	$ew = $this->emails->get_all_waiting_email();  	foreach($ew as $item){  		$q = $this->quotes->get_quote_by_id($item->qid);  		if($item->send_type == 0){	  			$this->send_email($item->eid, $q->Email, $item->qid, $item->id);  		}else{  			$this->send_email_sendpulse($item->eid, $q->Email, $item->qid, $item->id);  		}  		$this->emails->delete_email_from_waiting($item->id);  		//$this->emails->update_email_us_sent($item->id);  		  	}  }  // добавление везде писем времменно  function add_allEmail_quotes(){  	$q = $this->db->query('SELECT * FROM `emails_waiting`');  	$this->db->where('spart', '17');  	$q2 = $this->db->get('quotes');  	foreach($q2->result() as $item){  		foreach($q->result() as $emails){  			$emails->id = "";  			$emails->qid = $item->id;  			$this->db->insert('emails_waiting', $emails);  		}  		  	}  }  // Получаем писма по статусам в CD public function get_all_emails_move_orders(){ 	$user  = 'cdtrash@swatmoves.mobi';	$pass = 'iCy{qAQIqBh6';	$connect = imap_open('{server1.trentahost.com:993/imap/ssl}INBOX',$user, $pass);	if ($connect) {		//echo 'Successful';	} else {		echo 'Failed'; 		die;	}	//$mails = imap_search($connect, 'ALL');	$mails = imap_search($connect, 'UNSEEN');	foreach($mails as $mail){		//$mail = $mails[0];		$structure = imap_fetchstructure($connect, $mail);		//print_r($mail);		$boundary = '';		if ($structure->ifparameters) {		foreach ($structure->parameters as $param)		{				if (strtolower($param->attribute) == 'boundary')				$boundary = $param->value;			}		}		$parts = array();		// Get allparts to $parts		$this->getParts($structure, $parts);			if ($structure->type == 1) {				$parts = array();				// Get allparts to $parts				$this->getParts($structure, $parts);				$email['body'] = imap_fetchbody($connect, $mail, '1');				// Get attach 				$i = 0;				foreach ($parts as $part)				{					// Not text or multipart					if ($part['type'] > 1) {						$file = imap_fetchbody($connect, $mail, $i);						$mail['files'][] = array('content'  => base64_decode($file),							'filename' => $part['params'][0]['val'],							'size'     => $part['bytes']);						}						$i++;					}			}			else			{				$email['body'] = imap_body($connect, $mail);				//$mail['body'] = imap_utf8(($this->getPlain($mail['body'], $boundary)));				//$mail['body'] = iconv('KOI8-R', 'utf-8', $mail['body']);			}			$header = imap_headerinfo($connect, $mail);			$fromaddr = $header->from[0]->mailbox . "@" . $header->from[0]->host;			$subject = $header->subject;			$orderInfo = explode(': ',$subject);			$orderInfo = $orderInfo[1];			$orderInfo = explode(' ', $orderInfo);					$orderId = $orderInfo[0];			$orderAction = strtolower($orderInfo[3]);			$fid = $this->quotes->get_order_folder_by_name($orderAction);			if($fid != 0){				$this->domove($orderId, $fid);				$this->statistic->email_send_action($orderId, '0', "CD send new status to ORDER (".$orderInfo[3].")", '2');				}else{				$this->statistic->email_send_action($orderId, '0', "CD send new status to ORDER (".$orderInfo[3].") (FAIL TO MOVE)", '2');				}			//$this->parse_lead($email['body']);	} }  // Получаем список нечитаных лидов с почты public function get_all_emails_leads(){ 	$user  = 'leads@swatmoves.mobi';	$pass = 'y6Kpo6s4?!K2';	$connect = imap_open('{server1.trentahost.com:993/imap/ssl}INBOX',$user, $pass);	if ($connect) {		//echo 'Successful';	} else {		echo 'Failed'; 		die;	}	$mails = imap_search($connect, 'UNSEEN');	//$mails = imap_search($connect, 'ALL');	foreach($mails as $mail){		//$mail = $mails[0];		$structure = imap_fetchstructure($connect, $mail);		//print_r($mail);		$boundary = '';		if ($structure->ifparameters) {		foreach ($structure->parameters as $param)		{				if (strtolower($param->attribute) == 'boundary')				$boundary = $param->value;			}		}		$parts = array();		// Get allparts to $parts		$this->getParts($structure, $parts);			if ($structure->type == 1) {				$parts = array();				// Get allparts to $parts				$this->getParts($structure, $parts);				$email['body'] = imap_fetchbody($connect, $mail, '1');				// Get attach 				$i = 0;				foreach ($parts as $part)				{					// Not text or multipart					if ($part['type'] > 1) {						$file = imap_fetchbody($connect, $mail, $i);						$mail['files'][] = array('content'  => base64_decode($file),							'filename' => $part['params'][0]['val'],							'size'     => $part['bytes']);						}						$i++;					}			}			else			{				$email['body'] = imap_body($connect, $mail);				//$mail['body'] = imap_utf8(($this->getPlain($mail['body'], $boundary)));				//$mail['body'] = iconv('KOI8-R', 'utf-8', $mail['body']);			}			$this->parse_lead($email['body']);	}	$this->quotes->recount_inside_parts(1); }  // Получаем список нечитаных лидов с почты public function get_all_emails_answers(){ 	$user  = 'manager@swatmoves.mobi';	$pass = 'CRrKcL07X?M;';	$connect = imap_open('{server1.trentahost.com:993/imap/ssl}INBOX',$user, $pass);	if ($connect) {		//echo 'Successful';	} else {		echo 'Failed'; 		die;	}	$mails = imap_search($connect, 'ALL');	//print_r($mails);	//exit();	//$mails = imap_search($connect, 'UNSEEN');	$counter = 0;	foreach($mails as $mail){		//if($counter > 0) break;		$counter++;		//$mail = $mails[0];		$structure = imap_fetchstructure($connect, $mail);		//print_r($structure);		$boundary = '';		if ($structure->ifparameters) {		foreach ($structure->parameters as $param)		{				if (strtolower($param->attribute) == 'boundary')				$boundary = $param->value;			}		}		$parts = array();		// Get allparts to $parts		$this->getParts($structure, $parts);			if ($structure->type == 1) {				$parts = array();				// Get allparts to $parts				$this->getParts($structure, $parts);				$email['body'] = imap_fetchbody($connect, $mail, '1');				// Get attach 				$i = 0;				foreach ($parts as $part)				{					// Not text or multipart					if ($part['type'] > 1) {						$file = imap_fetchbody($connect, $mail, $i);						$mail['files'][] = array('content'  => base64_decode($file),							'filename' => $part['params'][0]['val'],							'size'     => $part['bytes']);						}						$i++;					}			}			else			{				$email['body'] = imap_body($connect, $mail);				//$mail['body'] = imap_utf8(($this->getPlain($mail['body'], $boundary)));				//$mail['body'] = iconv('KOI8-R', 'utf-8', $mail['body']);			}			$header = imap_headerinfo($connect, $mail);			$fromaddr = $header->from[0]->mailbox . "@" . $header->from[0]->host;			$subject = $header->subject;			$message_id = $header->message_id;			//print_r($fromaddr);			//echo "<br><br>";			imap_delete($connect, $mail);			imap_expunge($connect);						$qids = $this->emails->add_email_to_recived($fromaddr, $email['body'], $subject, $message_id);			//print_r($email);			echo "+<br/>";			if($qids[0] != 0){				$this->statistic->email_send_action($qids[0], '0', "RECIVE EMAIL FROM ".$fromaddr."(".print_r($qids, true).")", '2');			}		}	imap_close($connect); } // Отметить письмо как прочитаное public function update_email_as_readed(){ 	$REid = $this->input->post('REid'); 	$this->emails->update_emails_to_read($REid); }// Удалить полученоеписьмо public function delete_email_recived(){ 	$did = $this->input->post('REid'); 	$this->emails->delete_recived_email($did); }  // Парсим значения из писма лида public function parse_lead($leadText){ 	if($leadText != ""){	 	//$leadText = $leadText;	 	$leadVals = explode("\n", $leadText);	 		 	$vehicleRun = 0;			 	$shipVia = 0;			 	$shipperNote = "";		 	$distFromCity = ""; 		 	$distFromState = "";	 	$distFromZip = 0;	 	$distFromCountry = "";	 	$distToCity = "";	 	$distToState = "";	 	$distToZip = 0;	 	$distToCountry = "";	 		 	$arriveDate = "";			 	$price = 0;			 	$deposit = 0;	 	$carYear = 0;		 	$carModel = "";		 	$carMake = "";		 	$carType = "";		 	$cFname = "";	 	$cSname = "";	 	$cCompany = "";	 	$cEmail = "";	 	$cPhone = "";	 	$cPhone2 = "";	 	$cPhone3 = "";	 	$cMobile = "";	 	$cFax = "";	 	$cAddrStreet = "";	 	$cAddrCity = "";	 	$cAddrState = "";	 	$cAddrZip = 0;	 	$cAddrCountry = "";			 	foreach($leadVals as $item){	 		$vals = explode(':', $item);	 		if(isset($vals[1])){	 			echo $vals[0]." - ".trim($vals[1])."<br/>";	 			$flag = false;	 			if($vals[0] == "Customer Name") { $cFname = $vals[1]; $flag = true;}	 			if($vals[0] == "Customer Email"){ $cEmail = $vals[1]; $flag = true; }	 			if($vals[0] == "Customer Phone"){ $cPhone = $vals[1]; $flag = true; }	 			if($vals[0] == "Move Date"){ $arriveDate = date('Y-m-d', strtotime($vals[1])); $flag = true; }	 			if($vals[0] == "Origin City"){ $distFromCity = $vals[1]; $flag = true; }	 			if($vals[0] == "Origin State"){ $distFromState = $vals[1]; $flag = true; }	 			if($vals[0] == "Origin Zip") { $distFromZip = $vals[1]; $flag = true; }	 			if($vals[0] == "Destination City"){ $distToCity = $vals[1]; $flag = true; }	 			if($vals[0] == "Destination State"){ $distToState = $vals[1]; $flag = true;}	 			if($vals[0] == "Destination Zip"){ $distToZip = $vals[1]; $flag = true;}	 			if($vals[0] == "Vehicle Type"){ $carType = $vals[1]; $flag = true;}	 			if($vals[0] == "Vehicle Year"){ $carYear = $vals[1]; $flag = true;}	 			if($vals[0] == "Vehicle Make"){ $carMake = $vals[1]; $flag = true;}	 			if($vals[0] == "Vehicle Model"){ $carModel = $vals[1]; $flag = true;}	 			if($vals[0] == "Vehicle Condition") {	 				if(trim($vals[1]) == "Running"){	 					$vehicleRun = 1;	 				}else{	 					$vehicleRun = 2;	 				}	 				$flag = true;	 			}	 			if(($vals[0] == "Comments")&&(trim($vals[1])!="")){	 				$shipperNote = $vals[1];	 				$flag = true;	 			}	 		}	 	}	 	$qid = 0;		$chArray = array(	 		'FirstName'=>trim($cFname),	 		'SecondName'=>trim($cSname),	 		'Company'=>trim($cCompany),	 		'Email'=>trim($cEmail),	 		'Phone'=>trim($cPhone),	 		'Phone2'=>trim($cPhone2),	 		'Mobile'=>trim($cMobile),	 		'Fax'=>trim($cFax),	 		'Addr_street'=>trim($cAddrStreet),	 		'Addr_city'=>trim($cAddrCity),	 		'Addr_state'=>trim($cAddrState),	 		'Addr_zip'=>trim($cAddrZip),	 		'Addr_country'=>trim($cAddrCountry),	 		);	 	$contact = $this->quotes->update_users_contact(0, $chArray);			 	$chArray = array(	 		'spart'=>1,	 		'contact'=>$contact,	 		'distFromCity'=>$distFromCity,	 		'distFromState'=>$distFromState,	 		'distFromZip'=>$distFromZip,	 		'distFromCountry'=>$distFromCountry,	 		'distToCity'=>$distToCity,	 		'distToState'=>$distToState,	 		'distToZip'=>$distToZip,	 		'distToCountry'=>$distToCountry,	 		'arriveDate'=>$arriveDate,	 		'price'=>$price,	 		'deposit'=>$deposit,	 		'carYear'=>$carYear,	 		'carModel'=>$carModel,	 		'carMake'=>$carMake,	 		'carType'=>$carType,	 		'addDate'=>date('Y-m-d H:i:s'),	 		'moveDate'=>date('Y-m-d H:i:s'),	 		'vechinesRun'=>$vehicleRun,	 		'shipVia'=>$shipVia,	 		'shipperNote'=>$shipperNote	 		);				 	$qid = $this->quotes->update_quote_full($qid, $chArray);	 			 	$dist = json_decode(		file_get_contents(			"http://calc-api.ru/app:geo-api/null".str_replace(' ','%20','?a='.trim($distFromState).",".trim($distFromCity).'&b='.trim($distToState).",".trim($distToCity))		),		true		);	  		  	$dist = round($dist['distanse']* 0.62137119);		$this->quotes->update_quote($qid, 'distance', $dist);	 	$this->statistic->email_send_action($qid, '0', "ADD LEAD", '-1');					// Пишем события	  	$this->emails->add_mails_waiting($qid, 1);			} }private function getPlain($str, $boundary){	$lines = explode("\n", $str); 	$plain = false;	$res = '';	$start = false;	foreach ($lines as $line) {	if (strpos($line, 'text/plain') !== false) $plain = true;	if (strlen($line) == 1 && $plain) {		$start = true;		$plain = false;		continue;	}	if ($start && strpos($line, 'Content-Type') !== false) $start = false;	if ($start)		$res .= $line;	}	 	$res = substr($res, 0, strpos($res, '--' . $boundary));	 	$res = base64_decode($res == '' ? $str : $res);	 	return $res;}private function getParts($object, & $parts){	// Object is multipart	if ($object->type == 1) {		foreach ($object->parts as $part){			$this->getParts($part, $parts);		}	}else{		$p['type'] = $object->type;		$p['encode'] = $object->encoding;		$p['subtype'] = $object->subtype;		$p['bytes'] = $object->bytes;		if ($object->ifparameters == 1) {			foreach ($object->parameters as $param){				$p['params'][] = array('attr' => $param->attribute,				'val'  => $param->value);			}		}		if ($object->ifdparameters == 1) {			foreach ($object->dparameters as $param){				$p['dparams'][] = array('attr' => $param->attribute,				'val'  => $param->value);			}		}		$p['disp'] = null;		if ($object->ifdisposition == 1) {			$p['disp'] = $object->disposition;		}		$parts[] = $p;	}}// Пишем expire для ордеров которые послаись 4 дня назадpublic function set_Expire_CD_orders(){	$orders = $this->quotes->get_expire_orders();	foreach($orders as $order){		$this->domove($order->qid, 90);		$this->statistic->email_send_action($order->id, '0', "ORDER expired on CD ( posted at ".date('m/d/y H:i:s', $order->CDpostDate).")", '2');		}}// получаем контент всплывающего блока статистикиfunction get_emails_stat(){	$type = $this->input->post('type');	switch($type){		case "waiting":			$emails = $this->emails->get_all_waiting_stat();			foreach($emails as $email){				echo '<div onclick="silent_ch_folder(\''.$email->spart.'\');        activateQuote(\''.base_url().'\', \''.$email->qid.'\', 0); " class="SEmenuItem"><span style="font-size:11px;">email name:</span><br/><span style="font-weight:bold;">'.$email->ename.'</span><br/><span style="font-size:11px;">quote id:<span style="font-size:14px; font-eright:bold;">'.$email->qid.'</span></span><br/>'.date('m/d/y h:i A', strtotime($email->eatDate)).'</div>';			}		break;		case "sended":			$emails = $this->emails->get_all_sended_stat();			foreach($emails as $email){				echo '<div onclick="silent_ch_folder(\''.$email->spart.'\');        activateQuote(\''.base_url().'\', \''.$email->qid.'\', 0);" class="SEmenuItem"><span style="font-size:11px;">email name:</span><br/><span style="font-weight:bold;">'.$email->ename.'</span><br/><span style="font-size:11px;">quote id:<span style="font-size:14px; font-eright:bold;">'.$email->qid.'</span></span><br/>'.date('m/d/y h:i A', strtotime($email->eatDate)).'</div>';			}		break;		case "opened":			$emails = $this->emails->get_all_opened_stat();			foreach($emails as $email){				echo '<div onclick="silent_ch_folder(\''.$email->spart.'\');        activateQuote(\''.base_url().'\', \''.$email->qid.'\', 0); " class="SEmenuItem"><span style="font-size:11px;">email name:</span><br/><span style="font-weight:bold;">'.$email->ename.'</span><br/><span style="font-size:11px;">quote id:<span style="font-size:14px; font-eright:bold;">'.$email->qid.'</span></span><br/>'.date('m/d/y h:i A', strtotime($email->eatDate)).'<div style="padding:4px; font-size:11px; background-color:#ff5050; display:inline-block; padding-right:10px; padding-left:10px; color:#ffffff; cursor:pointer; margin-left:10px;" onclick="updateOpenEmailAsRead(\''.base_url().'\', \''.$email->esid.'\'); $(this).parent().fadeOut(500);">PROCESSED!</div></div>';			}		break;		case "recived":			$emails = $this->emails->get_all_recived_stat();			foreach($emails as $email){				echo '<div onclick="silent_ch_folder(\''.$email->spart.'\');        activateQuote(\''.base_url().'\', \''.$email->qid.'\', 0);" class="SEmenuItem"><span style="font-size:11px;">email name:</span><br/><span style="font-weight:bold;">'.$email->ename.'</span><br/><span style="font-size:11px;">quote id:<span style="font-size:14px; font-eright:bold;">'.$email->qid.'</span></span><br/>'.date('m/d/y h:i A', strtotime($email->eatDate)).'<div style="padding:4px; font-size:11px; background-color:'; if($email->status == 1){ echo '#777777'; }else{ echo "#ff5050"; }  echo '; display:inline-block; padding-right:10px; padding-left:10px; color:#ffffff; cursor:pointer; margin-left:10px;">'; if($email->status == 1){ echo 'PROCESSED!'; }else{ echo "NOT PROCESSED!"; }  echo '</div></div>';			}		break;	}}// получаем контент всплывающего блока статистикиfunction get_emails_teble_stat(){	$type = $this->input->post('type');	$qid = $this->input->post('qid');	switch($type){		case "waiting":			$emails = $this->emails->get_waiting_stat_($qid);			foreach($emails as $email){				echo '<div class="SEmenuItem"><span style="font-size:11px;">email name:</span><br/><span style="font-weight:bold;">'.$email->ename.'</span><br/>'.date('m/d/y h:i A', strtotime($email->eatDate)).'</div>';			}		break;		case "sended":			$emails = $this->emails->get_sended_stat_($qid);			foreach($emails as $email){				echo '<div class="SEmenuItem"><span style="font-size:11px;">email name:</span><br/><span style="font-weight:bold;">'.$email->ename.'</span><br/>'.date('m/d/y h:i A', strtotime($email->eatDate)).'</div>';			}		break;		case "opened":			$emails = $this->emails->get_opened_stat_($qid);			foreach($emails as $email){				echo '<div class="SEmenuItem"><span style="font-size:11px;">email name:</span><br/><span style="font-weight:bold;">'.$email->ename.'</span><br/>'.date('m/d/y h:i A', strtotime($email->eatDate)).'</div>';			}		break;		case "recived":			$emails = $this->emails->get_recived_stat_($qid);			foreach($emails as $email){				echo '<div class="SEmenuItem"><span style="font-size:11px;">email name:</span><br/><span style="font-weight:bold;">'.$email->ename.'</span><br/>'.date('m/d/y h:i A', strtotime($email->eatDate)).'</div>';			}		break;	}}// Получить статистику по формам public function get_forms_stat(){ 	$type = $this->input->post('type'); 	switch ($type) { 		case 'request': 			$stype = 0; 			break; 		case 'initial': 			$stype = 1; 			break; 		case 'shedule': 			$stype = 2; 			break; 	 	} 	$forms = $this->emails->get_stat_forms($stype); 	foreach($forms as $form){ 		if($form->qid == 0) $form->spart = 1;		echo '<div onclick="silent_ch_folder(\''.$form->spart.'\');        activateQuote(\''.base_url().'\', \''.$form->qid.'\', 0);" class="SEmenuItem"><span style="font-size:11px;">quote id:<span style="font-size:14px; font-eright:bold;">'.$form->qid.'</span></span><div style="font-weight:bold; margin-top:3px; margin-bottom:3px;">'.date('m/d/y h:i A', strtotime($form->atDate)).'</div><span style="font-size:11px;">'.nl2br($form->text).'</span></div>';	} }/* public function drop_all_down(){	//echo "a";	//exit();	$this->happyend();}*/function send_answer(){	$to_email = $this->input->post('from_email');	$mess_id = $this->input->post('mess_id');	$text = $this->input->post('text');	//print_r($this->input->post());	//exit();	/*	$this->load->library('email');	$this->email->set_header('References', $mess_id);	$this->email->set_header('In-Reply-To', $mess_id);	$this->email->to($to_email);	    $this->email->from('dan@swattransport.info');    $this->email->subject('...');    $this->email->message($text);       $this->email->send();*/    $mid = str_replace('<', '', str_replace('>', '', $mess_id));    $headers = "References: ".$mid."\r\nIn-Reply-To: ".$mid;    $sent = mail($to_email, "Re:---", $text , $headers, 'dan@swattransport.info');    }function smstextsave(){    $sms_id = $this->input->post('sms_id');    $new_text = $this->input->post('new_text');    $this->db->where('id', $sms_id);    $this->db->update('sms', array('text'=>$new_text));}    // [ANCADD]    public function add_sms_to_send(){        $user = $this->autorize();        $this->user =  $user;        $qid = $this->input->post('qid');        $sms_id = $this->input->post('sms_id');        $phone = $this->input->post('phone');        //$specEmail = $this->input->post('specEmail');        $ismass = $this->input->post('ismass');        $ismass = 0; //Пока не работает        if($ismass == 1){            $qids = explode('`', $qid);            foreach($qids as $qid){                $smsInfo = $this->emails->get_sms_by_id($eid);                $todate = $this->input->post('todate');                $addArray = array(                    'eid'=>$eid,                    'qid'=>$qid,                    'atDate'=>date('Y-m-d H:i:s'),                    'sendAtDate'=>date('Y-m-d H:i:s', strtotime($todate))                );                $newid = $this->emails->add_sms_to_send_process($addArray);                $this->statistic->sms_send_action($qid, $user->id, "ADD (MASS) SMS TO SEND (".$smsInfo->name.")", -1);            }        }else{            $smsInfo = $this->emails->get_sms_by_id($sms_id);            $todate = $this->input->post('todate');            $addArray = array(                'qid'=>$qid,                'sms_id'=>$sms_id,                'atDate'=>date('Y-m-d H:i:s'),                'sendAtDate'=>date('Y-m-d H:i:s', strtotime($todate)),                'status'=>0,                'phone'=>$phone            );            $newid = $this->emails->add_sms_to_send_process($addArray);            $this->statistic->sms_send_action($qid, $user->id, "ADD SMS TO SEND (".$smsInfo->name.")", -1);        }    }//[ANCADD]    public function sms_sended_to_waiting()    {        $ssms_id = $this->input->post('ssms_id');        $ssms_smsid = $this->input->post('ssms_smsid');        $qid = $this->input->post('qid');        $newdate = $this->input->post('todate');        $date = new DateTime();        $date = $date->format('Y-m-d H:i:s');        $tmpdate = DateTime::createFromFormat('d.m.Y H:i', $newdate);        $this->db->where('id', $ssms_id);        $tmp = $this->db->get('sms_sended')->row();        $towait = array(            'qid'=>$qid,            'sms_id'=>$ssms_smsid,            'atDate'=>$date,            'sendAtDate'=>$tmpdate->format('Y-m-d H:i:s'),            'status'=>0,            'phone'=>$tmp->phone        );        $this->db->insert('sms_waiting', $towait);        $this->db->query("DELETE FROM `sms_sended` WHERE `id`=?", array($ssms_id));        //redirect(base_url()."admin/", 'refresh');    }    function phpin()    {        phpinfo();    }					    }